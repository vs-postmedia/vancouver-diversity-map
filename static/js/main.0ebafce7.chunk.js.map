{"version":3,"sources":["data/mapbox-token.js","components/Legend/Legend.js","components/ControlPanel/ControlPanel.js","data/map-style.js","components/Tooltip/Tooltip.js","data/settings.js","components/ChoroplethMap/ChoroplethMap.js","components/App/App.js","serviceWorker.js","index.js"],"names":["MAPBOX_TOKEN","Legend","props","_props$settings","settings","legendColors","thresholds","react_default","a","createElement","className","map","d","i","key","style","backgroundColor","border","height","width","concat","Math","floor","defaultContainer","_ref","children","ControlPanel","_this","this","Container","containerComponent","currentView","displayPopulations","id","onClick","e","target","components_Legend_Legend","PureComponent","dataLayer","fromJS","source","type","interactive","paint","fill-color","property","stops","fill-opacity","fill-outline-color","defaultMapStyle","MAP_STYLE","Tooltip","hoveredFeature","x","y","prop","properties","blockList","sortable","Object","keys","includes","push","tooltipData","sort","b","slice","console","log","left","top","parseFloat","toFixed","percent","barStyle","display","SETTINGS","dataUrl","colors","displayPopulations_top15","displayPopulations_select","ChoroplethMap","state","mapStyle","colorStops","data","viewport","latitude","longitude","zoom","bearing","pitch","_loadData","features","forEach","value","percentile","scale","setIn","set","get","insert","setState","_updateSettings","_this$state","newMapStyle","_onViewportChange","_onHover","event","_event$srcEvent","srcEvent","offsetX","offsetY","find","f","layer","_this2","requestJson","error","response","scaleThreshold","domain","range","length","_this$state2","components_Tooltip_Tooltip","_this$state3","esm","assign","onViewportChange","mapboxApiAccessToken","api_key","onHover","positionOptions","enableHighAccuracy","trackUserLocation","showCompass","_renderTooltip","ControlPanel_ControlPanel_ControlPanel","Component","App","ChoroplethMap_ChoroplethMap_ChoroplethMap","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ebafce7.chunk.js","sourcesContent":["const MAPBOX_TOKEN = 'pk.eyJ1IjoibmdyaWZmaXRocy1wb3N0bWVkaWEiLCJhIjoiY2p6MDkyYXgzMDM5ZjNvbHYxeWo5ZjR6aSJ9.hjWwvvVEkKcPm_mXyW4-Uw';\n\nexport default MAPBOX_TOKEN;","import React from 'react';\nimport Aux from '../Aux/Aux';\nimport './Legend.css';\n\nconst Legend = (props) => {\n\tconst {legendColors, thresholds } = props.settings;\n\n\treturn (\n\t\t<div className=\"legend\">\n\t\t\t<h4>Per cent of population</h4>\n\t\t\t<div className='color-bar'>\t\n\t\t\t\t{\n\t\t\t\t\tthresholds.map((d, i) => {\n\t\t\t\t\t\t// if (d === undefined) { return }\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className='swatch' key={i} style={{\n\t\t\t\t\t\t\t\tbackgroundColor: legendColors[i],\n\t\t\t\t\t\t\t\tborder: '1px solid #FFFFFF',\n\t\t\t\t\t\t\t\theight: '10px',\n\t\t\t\t\t\t\t\twidth: '30px'\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t<p className='legend-label'>{`${Math.floor(d)}%`}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Legend;","import React, {PureComponent} from 'react';\nimport Legend from '../Legend/Legend';\nimport './ControlPanel.css';\n\nconst defaultContainer = ({children}) => <div className=\"control-panel\">{children}</div>;\n\nexport default class ControlPanel extends PureComponent {\n\trender() {\n\t\tconst Container = this.props.containerComponent || defaultContainer;\n\t\tconst {settings} = this.props;\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<h3>Interactive GeoJSON</h3>\n\t\t\t\t<p>Census tracks showing per cent of population claiming <b>{settings.currentView}</b> ancestry. Hover over a\n\t\t\t\t  state to see details.</p>\n\t\t\t\t<hr />\n\n\t\t\t\t{\n\t\t\t\t\tsettings.displayPopulations.map((d, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<button \n\t\t\t\t\t\t\t\tid={d} \n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\tonClick={e => this.props.onClick(e.target.id)}\n\t\t\t\t\t\t\t>{d}</button>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t<Legend settings={settings}></Legend>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\n","import {fromJS} from 'immutable';\n// import MAP_STYLE from './map-style-basic-v8.json';\nimport MAP_STYLE from './map-style-positron.json';\n\n// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\nexport const dataLayer = fromJS({\n\tid: 'data',\n\tsource: 'population',\n\ttype: 'fill',\n\tinteractive: true,\n\tpaint: {\n\t\t'fill-color': {\n\t\t\tproperty: 'percentile',\n\t\t\tstops: [\n\t\t\t\t[1, '#A7A9AB'],\n\t\t\t\t[2, '#D4DAEA'],\n\t\t\t\t[3, '#AFBEDB'],\n\t\t\t\t[4, '#829DC7'],\n\t\t\t\t[5, '#6D8EBF'],\n\t\t\t\t[6, '#3C76B0'],\n\t\t\t\t[7, '#0062A3']\n\t\t\t]\n\t\t},\n\t\t'fill-opacity': 0.8,\n\t\t'fill-outline-color': '#FFFFFF'\n\t}\n});\n\nexport const defaultMapStyle = fromJS(MAP_STYLE);\n\n/*\n[1, '#FFFFFF']\n\n[9, 'red']\n*/","import React from 'react';\nimport './Tooltip.css';\n\nconst Tooltip = (props) => {\n\tconst {currentView, hoveredFeature, x, y} = props;\n\tconst prop = hoveredFeature.properties\n\n\tconst blockList = ['GeoUID', 'Population', 'percent', 'percentile'];\n\n\tconst sortable = []\n\tObject.keys(prop).map((key, i) => {\n\t\tif (!blockList.includes(key)) {\n\t\t\tsortable.push([key, prop[key]])\n\t\t}\n\t});\n\n\tconst tooltipData = sortable.sort((a,b) => {\n\t\treturn b[1] - a[1];\n\t}).slice(0,5);\n\tconsole.log(tooltipData)\n\t\n\treturn (\n\t\t<div className=\"tooltip\" style={{ left: x, top: y - 50 }}>\n\t\t\t<p className='current-view'>{currentView}</p>\n\t\t\t<h1 className='current-percent'>{`${parseFloat(hoveredFeature.properties[currentView]).toFixed(1)}%`}</h1>\n\t\t\t<hr />\n\t\t\t<h4>Top ancesties reported:</h4>\n\t\t\t\n\t\t\t{\n\t\t\t\ttooltipData.map((d, i) => {\n\t\t\t\t\tconsole.log(d,i)\n\t\t\t\t\tconst percent = parseFloat(d[1]).toFixed(1);\n\t\t\t\t\tconst width = `${percent}px`;\n\t\t\t\t\tconst barStyle = {\n\t\t\t\t\t\tbackgroundColor: 'steelblue', \n\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\theight: '15px',\n\t\t\t\t\t\twidth: width\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className='percent-results' key={i}>\n\t\t\t\t\t\t\t<p className='group'>{`${d[0]}:`} </p>\n\t\t\t\t\t\t\t<div className='bar-container'>\n\t\t\t\t\t\t\t\t<div className='bar' style={barStyle}></div>\n\t\t\t\t\t\t\t\t<p className='percent-text'>{`${percent}%`}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default Tooltip;\n\n/*\n<div>GeoUID: { hoveredFeature.properties.GeoUID }</div>\n<div>Population: { hoveredFeature.properties.Population }</div>\n<div>Percent: { parseFloat(hoveredFeature.properties.percent).toFixed(1) }</div>\n<div>Percentile: { (hoveredFeature.properties.percentile) }</div>\n*/","const SETTINGS = {\n\tdataUrl: './data/choropleth-data-selectpops.geojson',\n\tcolors: ['#A7A9AB','#D4DAEA','#AFBEDB','#829DC7','#6D8EBF','#3C76B0','#0062A3', 'darkblue'],\n\tthresholds: [0.1, 5, 10, 25, 35, 50, 75], // needs to match the number of items in colours\n\tdisplayPopulations: ['Filipino','Iranian','Indian','Chinese','Korean','Japanese','Central','British Isles','First Nations/Métis/Inuit'],\n\tdisplayPopulations_top15: ['Chinese','English','Scottish','Canadian','Irish','Indian','German','French','Filipino','Ukranian','Italian','Dutch','Polish','Russian','Korean'],\n\tdisplayPopulations_select: ['Chinese','English','Scottish','Irish','Indian','German','French','Filipino','Ukranian','Italian','Dutch','Korean', 'Iranian', 'First Nations/Métis/Inuit']\n\t\n}\n\nexport default SETTINGS;","import React, {Component} from 'react';\nimport MapGL, { GeolocateControl, NavigationControl } from 'react-map-gl';\nimport {fromJS} from 'immutable';\n\nimport { range } from 'd3-array';\nimport {json as requestJson} from 'd3-request';\nimport { scaleThreshold } from 'd3-scale';\n\nimport ControlPanel from '../ControlPanel/ControlPanel';\nimport {defaultMapStyle, dataLayer} from '../../data/map-style.js';\n// import {updatePercentiles} from './utils';\nimport Tooltip from '../Tooltip/Tooltip';\nimport SETTINGS from '../../data/settings.js';\n\n\nimport './ChoroplethMap.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n\nexport default class ChoroplethMap extends Component {\n  \tstate = {\n\t\tmapStyle: defaultMapStyle,\n\t\tcolorStops: [],\n\t\tcurrentView: 'Indian',\n\t\tdata: null,\n\t\tdisplayPopulations: SETTINGS.displayPopulations_select,\n\t\thoveredFeature: null,\n\t\tlegendColors: SETTINGS.colors,\n\t\tthresholds: SETTINGS.thresholds,\n\t\tviewport: {\n\t\t\tlatitude: 49.228833,\n\t\t\tlongitude: -122.922978,\n\t\t\tzoom: 9,\n\t\t\tbearing: 0,\n\t\t\tpitch: 0\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\trequestJson(SETTINGS.dataUrl, (error, response) => {\n\t\t\tif (!error) {\n\t\t\t\tthis._loadData(response);\n\t\t\t}\n\t\t});\n\n\t\t// set our colour scale\n\t\tthis.scale = scaleThreshold()\n\t\t\t.domain(this.state.thresholds)\n\t\t\t.range(range(this.state.thresholds.length + 1)); // 0-based array\n\n\t\t// // prep work for the legend\n\t\t// const paintLayer = dataLayer.get('paint').toJS();\n\t\t// this.setState({ legendColors: paintLayer['fill-color'].stops.flat().filter(d => !Number.isInteger(d)) });\n\n\t\t// make the colors array mapbox-compatible\n\t\tconst stops = SETTINGS.colors.map((d,i) => {\n\t\t\treturn [i, d]\n\t\t});\t\n\t\tthis.setState({\n\t\t\tcolorStops: dataLayer.setIn(['paint', 'fill-color', 'stops'], fromJS(stops))\n\t\t});\n\t}\n\n\t_loadData = data => {\n\t\tconst property = this.state.currentView;\n\n\t\t// set the percent and percentile value for the tooltip & color data\n\t\tdata.features.forEach(d => {\n\t\t\tlet value = d.properties[property];\n\t\t\td.properties.percent = value;\n\t\t\td.properties.percentile = this.scale(value);\n\t\t});\n\n\t\n\t\t// create the mapstyle \n\t\tconst mapStyle = defaultMapStyle\n\t\t\t// Add geojson source to map\n\t\t\t.setIn(['sources', 'population'], fromJS({type: 'geojson', data}))\n\t\t\t// Add data layer below the labels for readability\n\t\t\t.set('layers', defaultMapStyle.get('layers').insert(15, this.state.colorStops));\n\t\t\t// .set('layers', defaultMapStyle.get('layers').push(dataLayer));\n\n\t\tthis.setState({data, mapStyle});\n\t};\n\n\t_updateSettings = id => {\n\t\tconst { data, mapStyle } = this.state;\n\n\t\t// loop through & update the percentile attribute with the currently selected population group (id)\n\t\tdata.features.forEach(d => {\n\t\t\tlet value = d.properties[id];\n\t\t\td.properties.percent = value;\t\t\t\n\t\t\td.properties.percentile = this.scale(value);\n\t\t});\n\n\t\tconst newMapStyle = mapStyle.setIn(['sources', 'population', 'data'], fromJS(data));\n\t\tthis.setState({\n\t\t\tcurrentView: id,\n\t\t\tmapStyle: newMapStyle\n\t\t});\n\t};\n\n\t_onViewportChange = viewport => this.setState({viewport});\n\n\t_onHover = event => {\n\t\tconst {\n\t\t\tfeatures,\n\t\t\tsrcEvent: {offsetX, offsetY}\n\t\t} = event;\n\t\tconst hoveredFeature = features && features.find(f => f.layer.id === 'data');\n\n\t\tthis.setState({hoveredFeature, x: offsetX, y: offsetY});\n\t};\n\n\t_renderTooltip() {\n\t\tconst {hoveredFeature, x, y} = this.state;\n\t\n\t\treturn (\n\t\t\thoveredFeature && (\n\t\t\t\t<Tooltip\n\t\t\t\t\thoveredFeature={hoveredFeature}\n\t\t\t\t\tcurrentView={this.state.currentView}\n\t\t\t\t\tx={x}\n\t\t\t\t\ty={y}\n\t\t\t\t></Tooltip>\n\t\t\t)\n\t\t);\n\t}\n\n\trender() {\n\t\tconst {viewport, mapStyle} = this.state;\n\n\t\treturn (\n\t\t  \t<div style={{height: '100%'}}>\n\t\t\t\t<MapGL\n\t\t\t\t\t{...viewport}\n\t\t\t\t\twidth='100%'\n\t\t\t\t\theight='100%'\n\t\t\t\t\tmapStyle={mapStyle}\n\t\t\t\t\t// mapStyle='mapbox://styles/mapbox/streets-v11'\n\t\t\t\t\tonViewportChange={this._onViewportChange}\n\t\t\t\t\tmapboxApiAccessToken={this.props.api_key}\n\t\t\t\t\tonHover={this._onHover}\n\t\t\t\t>\n\t\t\t\t\t<GeolocateControl \n\t\t\t\t    \tpositionOptions={{enableHighAccuracy: true}}\n\t\t\t\t    \ttrackUserLocation={true}\n\t\t\t\t    />\n\t\t\t\t    <NavigationControl showCompass={false}/>\n\n\t\t\t\t\t{this._renderTooltip()}\n\t\t\t\t</MapGL>\n\n\t\t\t\t<ControlPanel \n\t\t\t\t\tsettings={this.state}\n\t\t\t\t\tonClick={this._updateSettings}\n\t\t\t\t/>\n\t\t  \t</div>\n\t\t);\n\t}\n}\n\n","import React from 'react';\nimport MAPBOX_TOKEN from '../../data/mapbox-token.js';\nimport ChoroplethMap from '../ChoroplethMap/ChoroplethMap';\n// import LeafletMap from '../LeafletMap/LeafletMap';\n\nimport './App.css';\n\n\nfunction App() {\n\treturn (\n\t  \t<div className=\"App\">\n\t  \t\t<ChoroplethMap api_key={MAPBOX_TOKEN}></ChoroplethMap>\n\t  \t</div>\n\t);\n}\n\nexport default App;\n\n\n// <LeafletMap api_key={MAPBOX_TOKEN} data={geoJSON2}></LeafletMap>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport './css/index.css';\n\n\nReactDOM.render(<App />, document.getElementById('map'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}