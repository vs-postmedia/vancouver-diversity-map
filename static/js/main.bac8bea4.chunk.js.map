{"version":3,"sources":["data/mapbox-token.js","components/Legend/Legend.js","components/ControlPanel/ControlPanel.js","data/map-style.js","components/Tooltip/Tooltip.js","data/settings.js","components/ChoroplethMap/ChoroplethMap.js","components/App/App.js","serviceWorker.js","index.js"],"names":["MAPBOX_TOKEN","Legend","props","_props$settings","settings","legendColors","thresholds","currentView","console","log","react_default","a","createElement","className","concat","map","d","i","key","style","backgroundColor","border","height","width","Math","floor","defaultContainer","_ref","children","ControlPanel","_this","this","Container","containerComponent","selectOptions","displayPopulations","value","label","sort","b","react_select_browser_esm","isClearable","isSearchable","options","onChange","e","components_Legend_Legend","PureComponent","dataLayer","fromJS","id","source","type","interactive","paint","fill-color","property","stops","fill-opacity","fill-outline-color","defaultMapStyle","MAP_STYLE","Tooltip","hoveredFeature","x","y","prop","properties","blockList","tooltipData","Object","keys","includes","slice","left","top","parseFloat","toFixed","percent","barStyle","display","split","SETTINGS","dataUrl","colors","displayPopulations_top15","displayPopulations_select","ChoroplethMap","state","mapStyle","colorStops","data","viewport","latitude","longitude","zoom","bearing","pitch","_loadData","_updateCurrentDisplayData","setIn","set","get","insert","setState","features","forEach","percentile","scale","_updateSettings","_this$state","newMapStyle","_onViewportChange","_onHover","event","_event$srcEvent","srcEvent","offsetX","offsetY","find","f","layer","_this2","requestJson","error","response","_buildMenu","scaleThreshold","domain","range","length","dropList","p","push","_this$state2","components_Tooltip_Tooltip","_this$state3","position","esm","assign","onViewportChange","mapboxApiAccessToken","api_key","onHover","positionOptions","enableHighAccuracy","trackUserLocation","showCompass","_renderTooltip","ControlPanel_ControlPanel_ControlPanel","Component","App","ChoroplethMap_ChoroplethMap_ChoroplethMap","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bac8bea4.chunk.js","sourcesContent":["const MAPBOX_TOKEN = 'pk.eyJ1IjoibmdyaWZmaXRocy1wb3N0bWVkaWEiLCJhIjoiY2p6MDkyYXgzMDM5ZjNvbHYxeWo5ZjR6aSJ9.hjWwvvVEkKcPm_mXyW4-Uw';\n\nexport default MAPBOX_TOKEN;","import React from 'react';\nimport './Legend.css';\n\nconst Legend = (props) => {\n\tconst {legendColors, thresholds, currentView } = props.settings;\n\n\tconsole.log(props.settings)\n\n\treturn (\n\t\t<div className=\"legend\">\n\t\t\t<h4>{`Reported ${currentView} origins`}</h4>\n\t\t\t<div className='color-bar'>\t\n\t\t\t\t{\n\t\t\t\t\tthresholds.map((d, i) => {\n\t\t\t\t\t\t// if (d === undefined) { return }\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className='swatch' key={i} style={{\n\t\t\t\t\t\t\t\tbackgroundColor: legendColors[i],\n\t\t\t\t\t\t\t\tborder: '1px solid #FFFFFF',\n\t\t\t\t\t\t\t\theight: '10px',\n\t\t\t\t\t\t\t\twidth: '30px'\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t<p className='legend-label'>{`${Math.floor(d)}%`}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Legend;","import React, {PureComponent} from 'react';\nimport Select from 'react-select'\nimport Legend from '../Legend/Legend';\nimport './ControlPanel.css';\n\nconst defaultContainer = ({children}) => <div className=\"control-panel\">{children}</div>;\n\nexport default class ControlPanel extends PureComponent {\n\trender() {\n\t\tconst Container = this.props.containerComponent || defaultContainer;\n\t\tconst {settings} = this.props;\n\n\t\t// prep & sort options for select dropdown\n\t\tconst selectOptions = settings.displayPopulations.map(d => {\n\t\t\treturn { value: d, label: d}\n\t\t})\n\n\t\tselectOptions.sort((a,b) => { return (a.label > b.label) ? 1 : -1 });\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Select \n\t\t\t\t\t// defaultInputValue={'Type to search...'}\n\t\t\t\t\tvalue={'Indian'}\n\t\t\t\t\tisClearable\n\t\t\t\t\tisSearchable\n\t\t\t\t\toptions={selectOptions} \n\t\t\t\t\tonChange={e => this.props.onChange(e)}\n\t\t\t\t/>\n\t\t\t\t<Legend settings={settings}></Legend>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\n/*\n<h3>Vancouver’s origins</h3>\n<p>Census tracks showing estimated per cent of the population reporting <b>{settings.currentView}</b> origins. Select a tract for more details.</p>\n<hr />\n*/","import {fromJS} from 'immutable';\nimport MAP_STYLE from './map-style-basic-v8.json';\n// import MAP_STYLE from './map-style-positron.json';\n\n// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\nexport const dataLayer = fromJS({\n\tid: 'data',\n\tsource: 'population',\n\ttype: 'fill',\n\tinteractive: true,\n\tpaint: {\n\t\t'fill-color': {\n\t\t\tproperty: 'percentile',\n\t\t\tstops: [\n\t\t\t\t[1, '#A7A9AB'],\n\t\t\t\t[2, '#f1eef6'],\n\t\t\t\t[3, '#d0d1e6'],\n\t\t\t\t[4, '#a6bddb'],\n\t\t\t\t[5, '#74a9cf'],\n\t\t\t\t[6, '#2b8cbe'],\n\t\t\t\t[7, '#045a8d']\n\t\t\t\t// [1, '#A7A9AB'],\n\t\t\t\t// [2, '#D4DAEA'],\n\t\t\t\t// [3, '#AFBEDB'],\n\t\t\t\t// [4, '#829DC7'],\n\t\t\t\t// [5, '#6D8EBF'],\n\t\t\t\t// [6, '#3C76B0'],\n\t\t\t\t// [7, '#0062A3']\n\t\t\t]\n\t\t},\n\t\t'fill-opacity': 0.8,\n\t\t'fill-outline-color': '#FFFFFF'\n\t}\n});\n\nexport const defaultMapStyle = fromJS(MAP_STYLE);\n","import React from 'react';\nimport './Tooltip.css';\n\nconst Tooltip = (props) => {\n\tconst {currentView, hoveredFeature, x, y} = props;\n\tconst prop = hoveredFeature.properties\n\n\t// we want to ignore these properties\n\tconst blockList = ['GeoUID', 'Population', 'percent', 'percentile', 'Asian', 'African', 'Oceanian', 'North American', 'European', 'Central/South American'];\n\n\t// sort & get the top five reported origins\n\tconst tooltipData = Object.keys(prop).map((key, i) => {\n\t\tif (!blockList.includes(key)) {\n\t\t\treturn [key, prop[key]];\n\t\t}\n\t}).sort((a,b) => {\n\t\treturn b[1] - a[1];\n\t}).slice(0,5);\n\t\n\treturn (\n\t\t<div className=\"tooltip\" style={{ left: x, top: y - 50 }}>\n\t\t\t\n\t\t\t<h1 className='current-percent'>{`${parseFloat(hoveredFeature.properties[currentView]).toFixed(1)}%`}</h1>\n\t\t\t<p className='current-view'>{`Report ${currentView} origins`}</p>\n\t\t\t<hr />\n\t\t\t<h4>Top reported origins:</h4>\n\t\t\t\n\t\t\t{\n\t\t\t\ttooltipData.map((d, i) => {\n\t\t\t\t\tconst percent = parseFloat(d[1]).toFixed(1);\n\t\t\t\t\tconst width = `${percent}px`;\n\t\t\t\t\tconst barStyle = {\n\t\t\t\t\t\tbackgroundColor: 'steelblue', \n\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\theight: '15px',\n\t\t\t\t\t\twidth: width\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className='percent-results' key={i}>\n\t\t\t\t\t\t\t<p className='group'>{`${d[0].split('/')[0]}:`} </p>\n\t\t\t\t\t\t\t<div className='bar-container'>\n\t\t\t\t\t\t\t\t<div className='bar' style={barStyle}></div>\n\t\t\t\t\t\t\t\t<p className='percent-text'>{`${percent}%`}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default Tooltip;\n","const SETTINGS = {\n\tdataUrl: './data/choropleth-data-selectpops.geojson',\n\t// colors: ['#A7A9AB','#D4DAEA','#AFBEDB','#829DC7','#6D8EBF','#3C76B0','#0062A3', 'darkblue'], // postmedia blues\n\tcolors: [\n\t\t'#A7A9AB',\n\t\t'#f1eef6',\n\t\t'#d0d1e6',\n\t\t'#a6bddb',\n\t\t'#74a9cf',\n\t\t'#3690c0',\n\t\t'#0570b0',\n\t\t'#034e7b'\n\t], // colorbrewer blues\n\tthresholds: [0.1, 5, 10, 25, 35, 50, 75], // needs to match the number of items in colours\n\tdisplayPopulations: ['Filipino','Iranian','Indian','Chinese','Korean','Japanese','Central','British Isles','First Nations/Métis/Inuit'],\n\tdisplayPopulations_top15: ['Chinese','English','Scottish','Canadian','Irish','Indian','German','French','Filipino','Ukranian','Italian','Dutch','Polish','Russian','Korean'],\n\tdisplayPopulations_select: ['Chinese','English','Scottish','Irish','Indian','German','French','Filipino','Ukranian','Italian','Dutch','Korean', 'Iranian', 'First Nations/Métis/Inuit']\n\t\n}\n\nexport default SETTINGS;","import React, {Component} from 'react';\nimport MapGL, { GeolocateControl, NavigationControl } from 'react-map-gl';\nimport {fromJS} from 'immutable';\n\nimport { range } from 'd3-array';\nimport {json as requestJson} from 'd3-request';\nimport { scaleThreshold } from 'd3-scale';\n\nimport ControlPanel from '../ControlPanel/ControlPanel';\nimport {defaultMapStyle, dataLayer} from '../../data/map-style.js';\n// import {updatePercentiles} from './utils';\nimport Tooltip from '../Tooltip/Tooltip';\nimport SETTINGS from '../../data/settings.js';\n\n\nimport './ChoroplethMap.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n\nexport default class ChoroplethMap extends Component {\n  \tstate = {\n\t\tmapStyle: defaultMapStyle,\n\t\tcolorStops: [],\n\t\tcurrentView: 'Indian',\n\t\tdata: null,\n\t\tdisplayPopulations: SETTINGS.displayPopulations_select,\n\t\thoveredFeature: null,\n\t\tlegendColors: SETTINGS.colors,\n\t\tthresholds: SETTINGS.thresholds,\n\t\tviewport: {\n\t\t\tlatitude: 49.228833,\n\t\t\tlongitude: -122.922978,\n\t\t\tzoom: 9,\n\t\t\tbearing: 0,\n\t\t\tpitch: 0\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\trequestJson(SETTINGS.dataUrl, (error, response) => {\n\t\t\tif (!error) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tdisplayPopulations: this._buildMenu(response.features[0].properties)\n\t\t\t\t});\n\n\t\t\t\tthis._loadData(response);\n\t\t\t}\n\t\t});\n\n\t\t// set our colour scale\n\t\tthis.scale = scaleThreshold()\n\t\t\t.domain(this.state.thresholds)\n\t\t\t.range(range(this.state.thresholds.length + 1)); // 0-based array\n\n\t\t// // prep work for the legend\n\t\t// const paintLayer = dataLayer.get('paint').toJS();\n\t\t// this.setState({ legendColors: paintLayer['fill-color'].stops.flat().filter(d => !Number.isInteger(d)) });\n\n\t\t// make the colors array mapbox-compatible\n\t\tconst stops = SETTINGS.colors.map((d,i) => {\n\t\t\treturn [i, d]\n\t\t});\t\n\t\tthis.setState({\n\t\t\tcolorStops: dataLayer.setIn(['paint', 'fill-color', 'stops'], fromJS(stops))\n\t\t});\n\t}\n\n\t_buildMenu(data) {\n\t\tconst dropList = ['GeoUID', 'Population'];\n\t\t// const dropList = ['GeoUID', 'total_ethnic_origin'];\n\t\tlet displayPopulations = [];\n\n\t\tfor (let p in data) {\n\t\t\tif (!dropList.includes(p)) {\n\t\t\t\tdisplayPopulations.push(p);\n\t\t\t}\n\t\t}\n\n\t\treturn displayPopulations;\n\t}\n\t_loadData = data => {\n\t\tconst property = this.state.currentView;\n\n\t\t// set the percent and percentile value for the tooltip & color data\n\t\tthis._updateCurrentDisplayData(data, property);\n\t\n\t\t// create the mapstyle \n\t\tconst mapStyle = defaultMapStyle\n\t\t\t// Add geojson source to map\n\t\t\t.setIn(['sources', 'population'], fromJS({type: 'geojson', data}))\n\t\t\t// Add data layer below the labels for readability\n\t\t\t.set('layers', defaultMapStyle.get('layers').insert(15, this.state.colorStops));\n\t\t\t// .set('layers', defaultMapStyle.get('layers').push(dataLayer));\n\n\t\tthis.setState({data, mapStyle});\n\t};\n\n\t_updateCurrentDisplayData = (data, property) => {\n\t\tdata.features.forEach(d => {\n\t\t\tlet value = d.properties[property];\n\t\t\td.properties.percent = value;\t\t\t\n\t\t\td.properties.percentile = this.scale(value);\n\t\t});\n\t}\n\n\t_updateSettings = property => {\n\t\tconst { data, mapStyle } = this.state;\n\n\t\t// loop through & update the percentile attribute with the currently selected population group (id) wheeeeeeee! i love thingies and words! (Blurb)\n\t\tif (property) {\n\t\t\tthis._updateCurrentDisplayData(data, property.value);\n\n\t\t\tconst newMapStyle = mapStyle.setIn(['sources', 'population', 'data'], fromJS(data));\n\t\t\tthis.setState({\n\t\t\t\tcurrentView: property.value,\n\t\t\t\tmapStyle: newMapStyle\n\t\t\t});\n\t\t}\n\t};\n\n\t_onViewportChange = viewport => this.setState({viewport});\n\n\t_onHover = event => {\n\t\tconst {\n\t\t\tfeatures,\n\t\t\tsrcEvent: {offsetX, offsetY}\n\t\t} = event;\n\t\tconst hoveredFeature = features && features.find(f => f.layer.id === 'data');\n\n\t\tthis.setState({hoveredFeature, x: offsetX, y: offsetY});\n\t};\n\n\t_renderTooltip() {\n\t\tconst {hoveredFeature, x, y} = this.state;\n\t\n\t\treturn (\n\t\t\thoveredFeature && (\n\t\t\t\t<Tooltip\n\t\t\t\t\thoveredFeature={hoveredFeature}\n\t\t\t\t\tcurrentView={this.state.currentView}\n\t\t\t\t\tx={x}\n\t\t\t\t\ty={y}\n\t\t\t\t></Tooltip>\n\t\t\t)\n\t\t);\n\t}\n\n\trender() {\n\t\tconst {viewport, mapStyle} = this.state;\n\n\t\treturn (\n\t\t  \t<div style={{height: '100%', 'position': 'relative'}}>\n\t\t\t\t<MapGL\n\t\t\t\t\t{...viewport}\n\t\t\t\t\twidth='100%'\n\t\t\t\t\theight='100%'\n\t\t\t\t\tmapStyle={mapStyle}\n\t\t\t\t\t// mapStyle='mapbox://styles/mapbox/streets-v11'\n\t\t\t\t\tonViewportChange={this._onViewportChange}\n\t\t\t\t\tmapboxApiAccessToken={this.props.api_key}\n\t\t\t\t\tonHover={this._onHover}\n\t\t\t\t>\n\t\t\t\t\t<GeolocateControl \n\t\t\t\t    \tpositionOptions={{enableHighAccuracy: true}}\n\t\t\t\t    \ttrackUserLocation={true}\n\t\t\t\t    />\n\t\t\t\t    <NavigationControl showCompass={false}/>\n\n\t\t\t\t\t{this._renderTooltip()}\n\t\t\t\t</MapGL>\n\n\t\t\t\t<ControlPanel \n\t\t\t\t\tsettings={this.state}\n\t\t\t\t\tonChange={this._updateSettings}\n\t\t\t\t/>\n\t\t  \t</div>\n\t\t);\n\t}\n}\n\n","import React from 'react';\nimport MAPBOX_TOKEN from '../../data/mapbox-token.js';\nimport ChoroplethMap from '../ChoroplethMap/ChoroplethMap';\n\nimport './App.css';\n\n\nfunction App() {\n\treturn (\n\t  \t<div className=\"App\">\n\t  \t\t<header>\n\t  \t\t\t<h1>The places we come from</h1>\n\t  \t\t\t<p>The map below highlights the distribution of several of the most common responses in the Lower Mainland to the question of ethnic origin on the 2016 census.</p>\n\t  \t\t\t</header>\n\t  \t\t<ChoroplethMap api_key={MAPBOX_TOKEN}></ChoroplethMap>\n\t  \t</div>\n\t);\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport './css/index.css';\n\n\nReactDOM.render(<App />, document.getElementById('map'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}